services:
  backend:
    build:
      context: .
      dockerfile: ./grading-admin-service/Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./certificates/certs/localhost-root/localhost-root.CA.pem:/certificates/localhost-root.CA.crt
    depends_on:
      authentik:
        condition: service_healthy
      certificates:
        condition: service_completed_successfully
      localhost.dev:
        condition: service_started
  frontend:
    build: ./grading-admin-web
    restart: always
    env_file:
      - .env
    # depends_on:
    #   backend:
    #     condition: service_healthy
  authentik-postgres:
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - authentik-db:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-gradingadmindb}
    env_file:
      - .env
  authentik-redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - authentik-redis-store:/data
  authentik:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.12.1}
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-postgres
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    volumes:
      - ./authentik/media:/media
      - ./authentik/custom-templates:/templates
    env_file:
      - .env
    depends_on:
      authentik-postgres:
        condition: service_healthy
      authentik-redis:
        condition: service_healthy
  authentik-worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.12.1}
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-postgres
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    volumes:
      - ./authentik/media:/media
      - ./authentik/certs:/certs
      - ./authentik/custom-templates:/templates
    env_file:
      - .env
    depends_on:
      authentik-postgres:
        condition: service_healthy
      authentik-redis:
        condition: service_healthy
  certificates:
    build:
      context: certificates/
      dockerfile: Dockerfile
    environment:
      DOMAIN: ${DOMAIN:-localhost.dev}
      EMAIL: ${EMAIL:-gradingadmin@localhost}
      ENVIRONMENT: ${ENVIRONMENT:-development}
    volumes:
      - ./certificates/certs:/opt/certs:rw
  openapi-docs:
    build:
      context: .
      dockerfile: openapi/Dockerfile
  localhost.dev:
    image: 'nginx:alpine'
    volumes:
      - "./nginx/nginx.conf:/etc/nginx/nginx.conf"
      - "./certificates/certs/localhost.dev/out:/etc/ssl/localhost.dev:ro"
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      authentik:
        condition: service_healthy
      certificates:
        condition: service_completed_successfully
      openapi-docs:
        condition: service_started


volumes:
  authentik-db:
    driver: local
  authentik-redis-store:
    driver: local
