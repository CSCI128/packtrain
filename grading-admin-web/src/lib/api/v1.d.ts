/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/-/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Checks the health of the server */
        get: operations["check_health"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all courses
         * @description Get all courses, returning
         *     only active courses by default, and
         *     inactive courses if specified. Will
         *     return an empty list if there are no
         *     courses.
         *
         */
        get: operations["get_courses"];
        put?: never;
        /**
         * Create a new course
         * @description Create a new course.
         *
         */
        post: operations["new_course"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/courses/{course_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get existing course
         * @description Gets a course
         *
         */
        get: operations["get_course"];
        /**
         * Update existing course
         * @description Update an existing course by replacing all content in the course.
         *     If any assignments have been graded, then this will fail.
         *
         */
        put: operations["update_course"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/courses/{course_id}/import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import course from Canvas
         * @description Imports data from Canvas into an existing course
         *
         */
        post: operations["import_course"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/courses/{course_id}/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sync with established course controller
         * @description Syncs with a course in the controller.
         *
         */
        post: operations["sync_course"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/courses/{course_id}/assignments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update an assignment in a course
         * @description Update an assignment in a course
         *
         */
        put: operations["update_assignment"];
        /**
         * Add assignment to a course
         * @description Add assignments to a course.
         *     If any assignment already exist in the class (based off of the TODO),
         *     their information will be updated.
         *
         */
        post: operations["add_assignment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/courses/{course_id}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Enable the specified course.
         * @description Enable the specified course.
         *
         */
        put: operations["enable_course"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/courses/{course_id}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Disable the specified course.
         * @description Disable the specified course.
         *
         */
        put: operations["disable_course"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/courses/{course_id}/assignment/{assignment_id}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Disable the specified assignment.
         * @description Disable the specified assignment.
         *
         */
        put: operations["disable_assignment"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/courses/{course_id}/assignment/{assignment_id}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Enable the specified assignment.
         * @description Enable the specified assignment.
         *
         */
        put: operations["enable_assignment"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/courses/{course_id}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all members for a course
         * @description Gets all members for a course.
         *     Optional query params can be used to filter by TAs, Instructors, or Students.
         *     Can also be used to search by CWID or by name
         *
         */
        get: operations["get_members"];
        /**
         * Updates a member's membership in a course
         * @description Updates a member in a course. If they do not exist, then they are rejected.
         *
         */
        put: operations["update_course_member"];
        /**
         * Add a member to a course
         * @description Adds a member to a course.
         *     If they already exist, the request is rejected.
         *     If the user does not exist in system, then the request is rejected.
         *
         */
        post: operations["add_course_member"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all users
         * @description Gets all the users in the system
         *
         */
        get: operations["get_all_users"];
        put?: never;
        /**
         * Create a new user
         * @description Creates a new user.
         *
         */
        post: operations["create_user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/users/{cwid}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * enable a user
         * @description Enables a user
         *
         */
        put: operations["enable_user"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/users/{cwid}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * disable a user
         * @description Disables a user
         *
         */
        put: operations["disable_user"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/users/{cwid}/admin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Make a user an admin
         * @description Make a user an admin.
         *     This will fail if the account is disabled or if the requested user is enrolled as a student in any classes
         *
         */
        put: operations["make_admin"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets a user's information
         * @description Gets a user's information based on the provided JWT.
         *
         */
        get: operations["get_user"];
        /**
         * Updates a user's information
         * @description Updates a user's information based on the User provided in body and provided JWT.
         *
         */
        put: operations["update_user"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/credentials": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all credentials for a user
         * @description Gets all credentials for the signed in user.
         *     A user can only view their own credentials (including admins)
         *
         */
        get: operations["get_credentials"];
        put?: never;
        /**
         * Create a new credential for the user
         * @description Create a new credential for a user.
         *
         *     The credential must have a unique name for the user.
         *     It must also be the only credential for a service.
         *
         */
        post: operations["new_credential"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/credentials/{credential_id}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Deletes a credential for the user.
         * @description Deletes a selected credential for the user.
         *
         */
        delete: operations["delete_credential"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/credentials/{credential_id}/public": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Changes the visibility of the credential to public for the user.
         * @description Sets a credential's status to public for the user.
         *
         */
        put: operations["mark_credential_as_public"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/credentials/{credential_id}/private": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Changes the visibility of the credential to private for the user.
         * @description Sets a credential's status to private for the user.
         *
         */
        put: operations["mark_credential_as_private"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instructor/courses/{course_id}/assignment/{assignment_id}/user/{user_id}/extensions/{extension_id}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Approves an extension for an assignment for the user.
         * @description Approves an extension for an assignment for the user.
         *
         */
        put: operations["approve_extension"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instructor/courses/{course_id}/assignment/{assignment_id}/user/{user_id}/extensions/{extension_id}/deny": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Denies an extension for an assignment for the user.
         * @description Denies an extension for an assignment for the user.
         *
         */
        put: operations["deny_extension"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instructor/courses/{course_id}/policies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all policies
         * @description Get all policies for a course
         *
         */
        get: operations["get_all_policies"];
        put?: never;
        /**
         * Create a new policy
         * @description Create a new policy for the course
         *
         */
        post: operations["new_policy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instructor/courses/{course_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get information for a course
         * @description Get information from a course from
         *     the instructor's perspective; returns
         *     members as an aggregate of all members
         *     in their sections.
         *
         */
        get: operations["get_course_information_instructor"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instructor/courses/{course_id}/enrollments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all enrollments for all sections
         * @description Gets user enrollments for all sections
         *     an instructor is apart of.
         *
         */
        get: operations["get_instructor_enrollments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/student/courses/{course_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get information for a course
         * @description Get information from a course from
         *     the student's perspective; members and
         *     assignments are not returned but the
         *     section the student is in is returned.
         *
         */
        get: operations["get_course_information_student"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/student/enrollments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all enrollments for a user
         * @description Gets all enrollments (classes) that a
         *     user is apart of.
         *
         */
        get: operations["get_enrollments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/student/courses/{course_id}/assignments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get assignments for course
         * @description Get currently released assignments for course
         *
         */
        get: operations["get_course_assignments_student"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all tasks for current user
         * @description This endpoint gets all the tasks for the currently signed in user
         *
         */
        get: operations["get_all_tasks_for_user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{task_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get task by id
         * @description This endpoint returns the requested task if the user has access to it.
         *
         */
        get: operations["get_task"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instructor/courses/{course_id}/assignments/{assignment_id}/user/{user_id}/extensions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Extension request
         * @description Create a new extension request for an assignment.
         *     Replies with an extension request for a user and assignment.
         *
         */
        post: operations["new_extension"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instructor/courses/{course_id}/assignments/{assignment_id}/extensions/{extension_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all the approved extensions for the provided course and assignment
         * @description This endpoint gets all approved extensions for a given instructor
         *
         */
        get: operations["get_all_approved_extensions_for_assignment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instructor/courses/{course_id}/users/{user_id}/extensions/{extension_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all the approved extensions for the provided member
         * @description This endpoint gets all approved extensions for a given member
         *
         */
        get: operations["get_all_approved_extensions_for_member"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instructor/courses/{course_id}/sections/{section_id}/extensions/{extension_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all the extensions for the provided section
         * @description This endpoint gets all extensions for a given section
         *
         */
        get: operations["get_all_extensions_for_section"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/courses/{course_id}/extensions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all the extensions for the course
         * @description This endpoint gets all extensions for a given course
         *
         */
        get: operations["get_all_extensions_for_course"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instructor/courses/{course_id}/migrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all the master migrations for the course
         * @description This endpoint gets all master migrations for a given course
         *
         */
        get: operations["get_all_master_migrations_for_course"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/student/courses/{course_id}/extensions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Student Extension request
         * @description Create a new extension request for a student.
         *     Replies with an extension request including the request date, assignment impacted, new due date,
         *     status, and reason for extension.
         *
         */
        post: operations["extension_request"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instructor/courses/{course_id}/migrations/{migration_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Updates the grade for a migration for the user. Must include a reason for updating the grade.
         * @description Updates the grade for a migration for the user.
         *
         */
        put: operations["update_grade"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description An error occurred while processing that query */
        ErrorResponse: {
            error_source?: string;
            error_message?: string;
        };
        /** @description Create a new policy file */
        NewPolicy: {
            /** @example Default Policy */
            name: string;
            /** @example default.js */
            file_path: string;
            /**
             * Format: binary
             * @example // valid javascript code
             *
             */
            file_data: string;
        };
        /** @description A grading policy */
        Policy: {
            /** @example Default Policy */
            name?: string;
            /** @example https://s3.aws.com/999-9999-9999-99/default.js */
            uri?: string;
            course?: components["schemas"]["Course"];
            assignment?: components["schemas"]["Assignment"];
        };
        /** @description An async task on the server */
        Task: {
            /**
             * Format: int64
             * @example 291
             */
            id: number;
            /** @example Course Import - Canvas */
            name?: string;
            /**
             * Format: date-time
             * @example 2020-01-01T12:00:00.000Z
             */
            submitted_time: string;
            /**
             * Format: date-time
             * @example 2020-01-01T12:00:00.000Z
             */
            completed_time?: string;
            /** @example COMPLETED */
            status: string;
            /** @example A message about the status of the task */
            message?: string;
        };
        /** @description Import a new course from canvas */
        CourseSyncTask: {
            /**
             * Format: int64
             * @example 999999
             */
            canvas_id: number;
            /**
             * @default false
             * @example false
             */
            overwrite_name: boolean;
            /**
             * @default false
             * @example false
             */
            overwrite_code: boolean;
            /**
             * @default false
             * @example false
             */
            import_users: boolean;
            /**
             * @default false
             * @example false
             */
            import_assignments: boolean;
        };
        /** @description A credential for external service */
        Credential: {
            /** @example 99-9999-9999-99 */
            id?: string;
            /** @example Cred 1 */
            name?: string;
            /**
             * @example canvas
             * @enum {string}
             */
            service: "canvas" | "gradescope";
            /** @example a super secure key */
            api_key?: string;
            /** @example true */
            private?: boolean;
            owning_user: components["schemas"]["User"];
        };
        /** @description A list of credentials */
        Credentials: components["schemas"]["Credential"][];
        /** @description A server user */
        User: {
            /**
             * Format: email
             * @example user@test.com
             */
            email: string;
            /** @example 99999999 */
            cwid: string;
            /** @example Test User */
            name: string;
            /** @example false */
            admin: boolean;
            /** @example true */
            enabled?: boolean;
        };
        /** @description A user in a course */
        CourseMember: {
            /** @example 99999999 */
            cwid: string;
            /** @example self */
            canvas_id: string;
            /**
             * @example owner
             * @enum {string}
             */
            course_role: "student" | "instructor" | "ta" | "owner";
            sections?: string[];
        };
        /** @description An assignment in a course */
        Assignment: {
            /** @example 999-9999-9999-99 */
            id?: string;
            /** @example Assessment 1 */
            name: string;
            /** @example Quiz */
            category: string;
            /**
             * Format: int64
             * @example 1245678
             */
            canvas_id: number;
            /**
             * Format: double
             * @example 15
             */
            points: number;
            /**
             * Format: date-time
             * @example 2020-01-15T12:00:00.000Z
             */
            due_date: string;
            /**
             * Format: date-time
             * @example 2020-01-01T12:00:00.000Z
             */
            unlock_date: string;
            /** @example true */
            enabled: boolean;
            /** @example false */
            group_assignment?: boolean;
            /** @example false */
            attention_required?: boolean;
        };
        /** @description A complete course */
        Course: {
            /** @example 999-9999-9999-99 */
            id?: string;
            /** @example Fall 2020 */
            term: string;
            /** @example true */
            enabled: boolean;
            /** @example EXCL101 */
            name: string;
            /** @example Fall.2020.EXCL.101 */
            code: string;
            /**
             * Format: int64
             * @example 123456
             */
            canvas_id: number;
            members?: components["schemas"]["CourseMember"][];
            assignments?: components["schemas"]["Assignment"][];
            /** @example [
             *       "fall.2020.excl.101.section.a"
             *     ] */
            sections?: string[];
        };
        /** @description An extension for an assignment */
        Extension: {
            /** @example 999-9999-9999-99 */
            id?: string;
            assignments: components["schemas"]["Assignment"][];
            /**
             * Format: date-time
             * @example 2020-01-01T12:00:00.000Z
             */
            date_submitted: string;
            /** @example 2 */
            num_days_requested: number;
            user_requester: string;
            /**
             * @example Extension pending instructor approval
             * @enum {string}
             */
            status?: "pending" | "approved" | "rejected";
            /**
             * @example Late Pass
             * @enum {string}
             */
            request_type?: "extension" | "late_pass";
            user_reviewer?: string;
            /**
             * Format: date-time
             * @example 2020-01-01T12:00:00.000Z
             */
            response_timestamp?: string;
            /** @example Excused absence */
            reason?: string;
            /** @example Your 3 day extension for illness is approved */
            response_to_requester?: string;
        };
        /** @description The master migration that contains to the list of migration objects */
        MasterMigration: {
            migration_list: components["schemas"]["Migration"][];
        };
        /** @description The statistics from a master migration, has the number of: extensions, late penalties, missing, no credit */
        MasterMigrationStatistics: {
            /** @example 2 */
            missing: number;
            /** @example 12 */
            extensions_applied: number;
            /** @example 1 */
            no_credit: number;
            /** @example 5 */
            late_penalties: number;
        };
        /** @description Migration object that has a single assignment and a policy */
        Migration: {
            assignment: components["schemas"]["Assignment"];
            policy: components["schemas"]["Policy"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    check_health: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server is unhealthy */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_courses: {
        parameters: {
            query?: {
                onlyActive?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Course"][];
                };
            };
        };
    };
    new_course: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Course"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Course"];
                };
            };
        };
    };
    get_course: {
        parameters: {
            query?: {
                include?: ("members" | "assignments" | "sections")[];
            };
            header?: never;
            path: {
                course_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Course"];
                };
            };
            /** @description Course does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    update_course: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                course_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Course"];
            };
        };
        responses: {
            /** @description Updated course */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Refused to update course */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Course does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    import_course: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The course id */
                course_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CourseSyncTask"];
            };
        };
        responses: {
            /** @description Task Queued */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"][];
                };
            };
            /** @description An authentication error occurred */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Course not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    sync_course: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                course_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CourseSyncTask"];
            };
        };
        responses: {
            /** @description Task Queued */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"][];
                };
            };
            /** @description An authentication error occurred */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Course Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    update_assignment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                course_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Assignment"];
            };
        };
        responses: {
            /** @description Accepted */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Course Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    add_assignment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                course_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Assignment"];
            };
        };
        responses: {
            /** @description Accepted */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Assignment"];
                };
            };
            /** @description Course Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    enable_course: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                course_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Course Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    disable_course: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                course_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Course Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    disable_assignment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                course_id: string;
                assignment_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Assignment not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    enable_assignment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                course_id: string;
                assignment_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Assignment not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_members: {
        parameters: {
            query?: {
                enrollments?: ("tas" | "instructors" | "students")[];
                name?: string;
                cwid?: string;
            };
            header?: never;
            path: {
                course_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseMember"][];
                };
            };
            /** @description Course Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    update_course_member: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                course_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CourseMember"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Course Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    add_course_member: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                course_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CourseMember"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Course Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_all_users: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"][];
                };
            };
        };
    };
    create_user: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to create new user */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    enable_user: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                cwid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    disable_user: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                cwid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    make_admin: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                cwid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_user: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    update_user: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
            };
        };
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    get_credentials: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Credentials"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    new_credential: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Credential"];
            };
        };
        responses: {
            /** @description Created */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Credential"];
                };
            };
            /** @description Failed to create new credential */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    delete_credential: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                credential_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to delete credential */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Credential not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    mark_credential_as_public: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                credential_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to set credential to public */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Credential not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    mark_credential_as_private: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                credential_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to set credential to private */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Credential not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    approve_extension: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                course_id: string;
                assignment_id: string;
                user_id: string;
                extension_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to approve extension */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Extension not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deny_extension: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                course_id: string;
                assignment_id: string;
                user_id: string;
                extension_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to deny extension */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Extension not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_all_policies: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                course_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Policy"][];
                };
            };
        };
    };
    new_policy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                course_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["NewPolicy"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Policy"];
                };
            };
        };
    };
    get_course_information_instructor: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                course_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Course"];
                };
            };
        };
    };
    get_instructor_enrollments: {
        parameters: {
            query?: {
                name?: string;
                cwid?: string;
            };
            header?: never;
            path: {
                course_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseMember"][];
                };
            };
            /** @description Course Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_course_information_student: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                course_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Course"];
                };
            };
        };
    };
    get_enrollments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Course"][];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_course_assignments_student: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                course_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Assignment"][];
                };
            };
        };
    };
    get_all_tasks_for_user: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"][];
                };
            };
        };
    };
    get_task: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    new_extension: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The course ID */
                course_id: string;
                /** @description The assignment ID */
                assignment_id: string;
                /** @description The user's CWID */
                user_id: string;
                /** @description The extension ID */
                extension_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description An extension request has been created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Extension"];
                };
            };
            /** @description Extension not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_all_approved_extensions_for_assignment: {
        parameters: {
            query?: {
                status?: "approved" | "denied" | "pending";
            };
            header?: never;
            path: {
                /** @description The course ID */
                course_id: string;
                /** @description The assignment ID */
                assignment_id: string;
                /** @description The extension ID */
                extension_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"][];
                };
            };
            /** @description Extension not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_all_approved_extensions_for_member: {
        parameters: {
            query?: {
                status?: "approved" | "denied" | "pending";
            };
            header?: never;
            path: {
                /** @description The course ID */
                course_id: string;
                /** @description The user's CWID */
                user_id: string;
                /** @description The extension ID */
                extension_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"][];
                };
            };
            /** @description Extension not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_all_extensions_for_section: {
        parameters: {
            query?: {
                status?: "approved" | "denied" | "pending";
            };
            header?: never;
            path: {
                /** @description The course ID */
                course_id: string;
                /** @description The course section */
                section_id: string;
                /** @description The extension ID */
                extension_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"][];
                };
            };
            /** @description Extension not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_all_extensions_for_course: {
        parameters: {
            query?: {
                status?: "approved" | "denied" | "pending";
            };
            header?: never;
            path: {
                /** @description The course ID */
                course_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Extension"][];
                };
            };
            /** @description Extension not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_all_master_migrations_for_course: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The course ID */
                course_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MasterMigration"][];
                };
            };
            /** @description Migration not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    extension_request: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The course ID */
                course_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description An extension request has been created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Extension"];
                };
            };
            /** @description Extension not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    update_grade: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                course_id: string;
                migration_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to update grade */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Migration not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
