// import { useState } from 'react'
// import reactLogo from '../assets/react.svg'
// import viteLogo from '/vite.svg'
// import '../App.css'

// export function HomePage() {
// const [count, setCount] = useState(0)
    
//   return (
//     <>
//       <div>
//         <a href="https://vite.dev" target="_blank">
//           <img src={viteLogo} className="logo" alt="Vite logo" />
//         </a>
//         <a href="https://react.dev" target="_blank">
//           <img src={reactLogo} className="logo react" alt="React logo" />
//         </a>
//       </div>
//       <h1>Vite + React</h1>
//       <div className="card">
//         <button onClick={() => setCount((count) => count + 1)}>
//           count is {count}
//         </button>
//         <p>
//           Edit <code>src/App.tsx</code> and save to test HMR
//         </p>
//       </div>
//       <p className="read-the-docs">
//         Click on the Vite and React logos to learn more
//       </p>
//     </>
//   );
// }

// import createFetchClient from "openapi-fetch";
// import createClient from "openapi-react-query";
// import type { paths } from "../lib/api/v1"; // generated by openapi-typescript

// const fetchClient = createFetchClient<paths>({
//   baseUrl: "https://localhost.dev/api/",
// });
// const $api = createClient(fetchClient);

// export function HomePage() {
//   const { data, error, isLoading } = $api.useQuery(
//     "put",
//     "/admin/course/new/{canvas_id}",
//     {
//       params: {
//         path: { canvas_id: "5" },
//       },
//     },
//   );

//   if (isLoading || !data) return "Loading...";

//   if (error) return `An error occured: ${error.error_message}`;

//   return <div>{data.canvas_id}</div>;
// };


import React, { useEffect, useState } from 'react';
import { UserManager, User, Log } from 'oidc-client-ts';

Log.setLogger(console);
Log.setLevel(Log.INFO);

const config = {
  authority: 'https://localhost.dev/auth/application/o/grading-admin/',
  client_id: 'grading_admin_provider',
  redirect_uri: 'https://localhost.dev/',
  response_type: 'code',
  scope: 'openid',
  post_logout_redirect_uri: 'https://localhost.dev/',
  code_challenge_method: 'S256', // Enable PKCE with S256
};

const userManager = new UserManager(config);

export function HomePage() {
  const [user, setUser] = useState<User | null>(null);

  useEffect(() => {
    const handleCallback = async () => {
      try {
        // Check if the URL contains an authorization response (e.g., ?code=)
        const url = new URL(window.location.href);
        if (url.searchParams.has('code') || url.searchParams.has('state')) {
          await userManager.signinRedirectCallback();
          // Remove query parameters from the URL after processing
          window.history.replaceState({}, document.title, url.pathname);
        }
        const user = await userManager.getUser();
        setUser(user);
        console.log(user);
      } catch (error) {
        console.error('Error handling callback:', error);
      }
    };

    handleCallback();
  }, []);

  const handleLogin = async () => {
    await userManager.signinRedirect();
  };

  const handleLogout = async () => {
    await userManager.signoutRedirect();
  };

  return (
    <div>
      {user ? (
        <div>
          <p>Welcome, {user.profile.sub}!</p>
          <button onClick={handleLogout}>Logout</button>
        </div>
      ) : (
        <button onClick={handleLogin}>Login</button>
      )}
    </div>
  );
};
