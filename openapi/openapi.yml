openapi: "3.0.0"
servers:
  - url: https://localhost.dev/api
    description: Local Development

info:
  title: packtrain
  description: |
    This API defines the operations required manage grades for classes
    that utilize multiple platforms while respecting custom late policies
  version: 1.0.0
  license:
    name: MIT



tags:
  - name: health
    description: Health checks for grading server
  - name: admin
    description: Administration functions for the grading server
  - name: user
    description: User management functions for the grading server
  - name: instructor
    description: Instructor functions for the grading server
  - name: tasks
    description: Async task service for the grading server
  - name: student
    description: Student functions for the grading server
  - name: owner
    description: Course owner functions for the grading server

paths:
  /-/health:
    get:
      tags:
        - health
      operationId: check_health
      summary: Checks the health of the server
      responses:
        200:
          description: ok
        500:
          description: "Server is unhealthy"

  /admin/courses:
    post:
      tags:
        - admin
      operationId: new_course
      summary: "Create a new course"
      description: |
        Create a new course.
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course"
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
    delete:
      tags:
        - admin
      operationId: delete_course
      summary: delete existing course
      description: |
        Deletes a course
      
      parameters:
        - $ref: "#/components/parameters/CourseQueryParameters"
      responses:
        404:
          description: "Course does not exist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "course_creation"
                error_message: "Course '999-9999-9999-99' does not exist"
        400:
          description: "Failed to delete course"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "course_creation"
                error_message: "Failed to delete course"

  /admin/users:
    get:
      tags:
        - admin
      operationId: get_all_users
      summary: "Get all users"
      description: |
        Gets all the users in the system
      
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      tags:
        - admin
      operationId: create_user
      summary: "Create a new user"
      description: |
        Creates a new user.
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: "Created"
        400:
          description: "Failed to create new user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "create_user"
                error_message: "Failed to create new user"

    put:
      tags:
        - admin
      operationId: admin_update_user
      
      summary: Updates a user's information, including admin and disabled/enabled status
      description: |
        Updates a user's information based on the User provided in body and provided JWT.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        202:
          description: "Accepted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /admin/users/{cwid}/enable:
    put:
      tags:
        - admin
      operationId: enable_user
      summary: "enable a user"
      description: |
        Enables a user
      
      parameters:
        - $ref: "#/components/parameters/CwidPathParameters"
      responses:
        201:
          description: "Created"
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Failed to update user"

  /admin/users/{cwid}/disable:
    put:
      tags:
        - admin
      operationId: disable_user
      summary: "disable a user"
      description: |
        Disables a user
      
      parameters:
        - $ref: "#/components/parameters/CwidPathParameters"
      responses:
        201:
          description: "Created"
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Failed to update user"

  /owner/courses/{course_id}:
    put:
      tags:
        - owner
      operationId: update_course
      summary: Update existing course
      description: |
        Update an existing course.
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course"
      responses:
        204:
          description: "No Content"
        404:
          description: "Course does not exist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "course_creation"
                error_message: "Course '999-9999-9999-99' does not exist"
    get:
      tags:
        - owner
      operationId: get_course
      summary: Get existing course
      description: |
        Gets a course
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - name: "include"
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - members
                - assignments
                - sections
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
        404:
          description: "Course does not exist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "course_creation"
                error_message: "Course '999-9999-9999-99' does not exist"

  /owner/courses/{course_id}/import:
    post:
      tags:
        - owner
      operationId: import_course
      summary: "Import course from Canvas"
      description: |
        Imports data from Canvas into an existing course
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CourseSyncTask"
      responses:
        202:
          description: "Task Queued"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        404:
          description: "Course not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "Course Service"
                error_message: "Error: course id not found"
        403:
          description: "An authentication error occurred"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "Canvas Service"
                error_message: "Error: invalid token"

  /owner/courses/{course_id}/sync:
    post:
      tags:
        - owner
      operationId: sync_course
      summary: "Sync with established course controller"
      description: |
        Syncs with a course in the controller.
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CourseSyncTask"
      responses:
        202:
          description: "Task Queued"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        403:
          description: "An authentication error occurred"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "Canvas Service"
                error_message: "Error: invalid token"
        404:
          description: Course Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_course"
                error_message: "Course '999-9999-9999-99' does not exist"

  /owner/courses/{course_id}/assignments:
    put:
      tags:
        - owner
      operationId: update_assignment
      summary: "Update an assignment in a course"
      description: |
        Update an assignment in a course
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Assignment"
      responses:
        201:
          description: "Accepted"
        404:
          description: Course Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_course"
                error_message: "Course '999-9999-9999-99' does not exist"
    post:
      tags:
        - owner
      operationId: add_assignment
      summary: "Add assignment to a course"
      description: |
        Add assignments to a course.
        If any assignment already exists in the class,
        its information will be updated.
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Assignment"
      responses:
        201:
          description: "Accepted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Assignment"
        404:
          description: Course Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_course"
                error_message: "Course '999-9999-9999-99' does not exist"

  /owner/courses/{course_id}/assignment/{assignment_id}/disable:
    put:
      tags:
        - owner
      operationId: disable_assignment
      summary: "Disable the specified assignment."
      description: |
        Disable the specified assignment.
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - $ref: "#/components/parameters/AssignmentPathParameters"
      responses:
        200:
          description: "OK"
        404:
          description: "Assignment not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: disable_assignment
                error_message: "Assignment '999-9999-9999-99' does not exist"

  /owner/courses/{course_id}/assignment/{assignment_id}/enable:
    put:
      tags:
        - owner
      operationId: enable_assignment
      summary: "Enable the specified assignment."
      description: |
        Enable the specified assignment.
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - $ref: "#/components/parameters/AssignmentPathParameters"
      responses:
        200:
          description: "OK"
        404:
          description: "Assignment not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: enable_assignment
                error_message: "Assignment '999-9999-9999-99' does not exist"
  /owner/courses/{course_id}/members:
    get:
      tags:
        - owner
      operationId: get_members
      
      summary: "Get all members for a course"
      description: |
        Gets all members for a course.
        Optional query params can be used to filter by TAs, Instructors, or Students.
        Can also be used to search by CWID or by name
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - name: "enrollments"
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - tas
                - instructors
                - students
        - name: "name"
          in: query
          required: false
          schema:
            type: string
            description: "Part of (or full) name to search for"
            example: "Alex"
        - name: "cwid"
          in: query
          required: false
          schema:
            type: string
            description: "Part of (or full) cwid to search for"
            example: "9999999"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CourseMember"
        404:
          description: Course Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_course"
                error_message: "Course '999-9999-9999-99' does not exist"

  /owner/courses/{course_id}/policies:
    post:
      tags:
        - owner
      operationId: new_policy
      summary: Create a new policy
      description: |
        Create a new policy for the course
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/NewPolicy"
            encoding:
              file_data:
                contentType: "text/javascript"
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
    get:
      tags:
        - owner
      operationId: owner_get_all_policies
      summary: Get all policies
      description: |
        Get all policies for a course
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Policy"

  /owner/course/{course_id}/policies/dry-run:
    post:
      tags:
        - owner
      operationId: dry_run_policy
      summary: Dry run a policy
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PolicyDryRun"
            encoding:
              file_data:
                contentType: "text/javascript"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyDryRunResults"


  /owner/course/{course_id}/policies/{policy_id}:
    delete:
      tags:
        - owner
      operationId: delete_policy
      summary: Delete a policy
      description: |
        Delete policy for the course
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - $ref: "#/components/parameters/PolicyPathParameters"
      responses:
        204:
          description: "No Content"

  /user:
    get:
      tags:
        - user
      operationId: get_user
      
      summary: Gets a user's information
      description: |
        Gets a user's information based on the provided JWT.
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

    put:
      tags:
        - user
      operationId: update_user
      
      summary: Updates a user's information
      description: |
        Updates a user's information based on the User provided in body and provided JWT.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        202:
          description: "Accepted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /user/enrollments:
    get:
      tags:
        - user
      operationId: get_enrollments
      
      summary: "Get all enrollments for a user"
      description: |
        Gets all enrollments (classes) that a
        user is apart of.
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Enrollment"
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "User '999-9999-9999-99' does not exist!"

  /user/credentials:
    post:
      tags:
        - user
      operationId: new_credential
      summary: Create a new credential for the user
      description: |
        Create a new credential for a user.

        The credential must have a unique name for the user.
        It must also be the only credential for a service.
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Credential"
      responses:
        202:
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credential"
        400:
          description: "Failed to create new credential"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Failed to create new credential for user"
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "User '999-9999-9999-99' does not exist!"

    get:
      tags:
        - user
      operationId: get_credentials
      summary: Get all credentials for a user
      description: |
        Gets all credentials for the signed in user.
        A user can only view their own credentials (including admins)
      
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credentials"
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "User '999-9999-9999-99' does not exist!"

  /user/credentials/{credential_id}/delete:
    delete:
      tags:
        - user
      operationId: delete_credential
      summary: Deletes a credential for the user.
      description: |
        Deletes a selected credential for the user.
      
      parameters:
        - name: credential_id
          in: path
          required: true
          schema:
            type: string
            example: "99-9999-9999-99"
      responses:
        204:
          description: "No Content"
        400:
          description: "Failed to delete credential"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Failed to delete credential for user"
        404:
          description: "Credential not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Credential '99-9999-9999-99' does not exist!"

  /user/credentials/{credential_id}/public:
    put:
      tags:
        - user
      operationId: mark_credential_as_public
      summary: Changes the visibility of the credential to public for the user.
      description: |
        Sets a credential's status to public for the user.
      
      parameters:
        - name: credential_id
          in: path
          required: true
          schema:
            type: string
            example: "99-9999-9999-99"
      responses:
        202:
          description: "Accepted"
        400:
          description: "Failed to set credential to public"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Failed to set credential to public for user"
        404:
          description: "Credential not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Credential '99-9999-9999-99' does not exist!"

  /user/credentials/{credential_id}/private:
    put:
      tags:
        - user
      operationId: mark_credential_as_private
      summary: Changes the visibility of the credential to private for the user.
      description: |
        Sets a credential's status to private for the user.
      
      parameters:
        - name: credential_id
          in: path
          required: true
          schema:
            type: string
            example: "99-9999-9999-99"
      responses:
        202:
          description: "Accepted"
        400:
          description: "Failed to set credential to private"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Failed to set credential to private for user"
        404:
          description: "Credential not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Credential '99-9999-9999-99' does not exist!"

  /instructor/courses/{course_id}/extensions:
    get:
      tags:
        - instructor
      operationId: get_all_extensions_for_course
      summary: Get all the extensions for the course
      description: |
        This endpoint gets all extensions for a given course
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - approved
              - denied
              - pending
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LateRequest"
        404:
          description: "Extension not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "User Service"
                error_message: "Error: extension request not found"

  /instructor/courses/{course_id}/assignment/{assignment_id}/user/{cwid}/extensions/{extension_id}/approve:
    put:
      tags:
        - instructor
      operationId: approve_extension
      summary: Approves an extension for an assignment for the user.
      description: |
        Approves an extension for an assignment for the user.
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - $ref: "#/components/parameters/AssignmentPathParameters"
        - $ref: "#/components/parameters/CwidPathParameters"
        - $ref: "#/components/parameters/ExtensionPathParameters"
        - name: reason
          in: query
          required: true
          schema:
            type: string
            example: "Good extension"
      responses:
        202:
          description: "Accepted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LateRequest"
        400:
          description: "Failed to approve extension"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Failed to approve extension for user"
        404:
          description: "Extension not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Failed to approve extensions for user"

  /instructor/courses/{course_id}/assignment/{assignment_id}/user/{cwid}/extensions/{extension_id}/deny:
    put:
      tags:
        - instructor
      operationId: deny_extension
      summary: Denies an extension for an assignment for the user.
      description: |
        Denies an extension for an assignment for the user.
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - $ref: "#/components/parameters/AssignmentPathParameters"
        - $ref: "#/components/parameters/CwidPathParameters"
        - $ref: "#/components/parameters/ExtensionPathParameters"
        - name: reason
          in: query
          required: true
          schema:
            type: string
            example: "Bad extension"
      responses:
        202:
          description: "Accepted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LateRequest"
        400:
          description: "Failed to deny extension"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Failed to deny extension for user"
        404:
          description: "Extension not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Failed to deny extension for user"

  /instructor/courses/{course_id}:
    get:
      tags:
        - instructor
      operationId: get_course_information_instructor
      summary: Get information for a course
      description: |
        Get information from a course from
        the instructor's perspective; returns
        members as an aggregate of all members
        in their sections.
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"

  /instructor/courses/{course_id}/members:
    get:
      tags:
        - instructor
      operationId: get_members_instructor
      
      summary: "Get all members for a course"
      description: |
        Gets all members for a course.
        Optional query params can be used to filter by TAs, Instructors, or Students.
        Can also be used to search by CWID or by name
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - name: "enrollments"
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - tas
                - instructors
                - students
        - name: "name"
          in: query
          required: false
          schema:
            type: string
            description: "Part of (or full) name to search for"
            example: "Alex"
        - name: "cwid"
          in: query
          required: false
          schema:
            type: string
            description: "Part of (or full) cwid to search for"
            example: "9999999"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CourseMember"
        404:
          description: Course Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_course"
                error_message: "Course '999-9999-9999-99' does not exist"

  /instructor/courses/{course_id}/enrollments:
    get:
      tags:
        - instructor
      operationId: get_instructor_enrollments
      
      summary: "Get all enrollments for all sections"
      description: |
        Gets user enrollments for all sections 
        an instructor is apart of.
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - name: "name"
          in: query
          required: false
          schema:
            type: string
            description: "Part of (or full) name to search for"
            example: "Alex"
        - name: "cwid"
          in: query
          required: false
          schema:
            type: string
            description: "Part of (or full) cwid to search for"
            example: "9999999"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CourseMember"
        404:
          description: Course Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_course"
                error_message: "Course '999-9999-9999-99' does not exist"

  /instructor/courses/{course_id}/policies:
    get:
      tags:
        - instructor
      operationId: get_all_policies
      summary: Get all policies
      description: |
        Get all policies for a course
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Policy"

  /instructor/courses/{course_id}/assignments/{assignment_id}/user/{cwid}/extensions:
    post:
      tags:
        - instructor
      operationId: new_extension
      summary: "Create Extension request"
      description: |
        Create a new extension request for an assignment.
        Replies with an extension request for a user and assignment.
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - $ref: "#/components/parameters/AssignmentPathParameters"
        - $ref: "#/components/parameters/CwidPathParameters"
      responses:
        201:
          description: "An extension request has been created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Extension"
        404:
          description: "Extension not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "User Service"
                error_message: "Error: extension request not found"

  /instructor/courses/{course_id}/assignments/{assignment_id}/extensions/{extension_id}:
    get:
      tags:
        - instructor
      operationId: get_all_approved_extensions_for_assignment
      summary: Get all the approved extensions for the provided course and assignment
      description: |
        This endpoint gets all approved extensions for a given instructor
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - $ref: "#/components/parameters/AssignmentPathParameters"
        - $ref: "#/components/parameters/ExtensionPathParameters"
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - approved
              - denied
              - pending
              - all
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "Extension not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "User Service"
                error_message: "Error: extension request not found"

  /instructor/courses/{course_id}/users/{cwid}/extensions/{extension_id}:
    get:
      tags:
        - instructor
      operationId: get_all_approved_extensions_for_member
      summary: Get all the approved extensions for the provided member
      description: |
        This endpoint gets all approved extensions for a given member
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - $ref: "#/components/parameters/CwidPathParameters"
        - $ref: "#/components/parameters/ExtensionPathParameters"
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - approved
              - denied
              - pending
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "Extension not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "User Service"
                error_message: "Error: extension request not found"

  /instructor/courses/{course_id}/sections/{section_id}/extensions/{extension_id}:
    get:
      tags:
        - instructor
      operationId: get_all_extensions_for_section
      summary: Get all the extensions for the provided section
      description: |
        This endpoint gets all extensions for a given section
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - name: section_id
          required: true
          description: "The course section"
          in: path
          schema:
            type: string
            example: "Section F"
        - $ref: "#/components/parameters/ExtensionPathParameters"
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - approved
              - denied
              - pending
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "Extension not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "User Service"
                error_message: "Error: extension request not found"

  /instructor/courses/{course_id}/migrations:
    post:
      tags:
        - instructor
      operationId: create_master_migration
      summary: Create a new master migration
      description: |
        Create a master migration - these can be thought as a set of assignments that will be migrated as a set.
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterMigration"
    get:
      tags:
        - instructor
      operationId: get_all_migrations
      summary: Gets all master migrations
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MasterMigration"

  /instructor/courses/{course_id}/migrations/{master_migration_id}:
    get:
      tags:
        - instructor
      operationId: get_master_migration
      summary: Get master migration
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - $ref: "#/components/parameters/MasterMigrationPathParameters"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterMigration"
    post:
      tags:
        - instructor
      operationId: create_migration_for_master_migration
      summary: "Create migration for a master migration"
      description: |
        Create a new migration for a master migration.
        Replies with an master migration including the list of migrations, one for each assignment
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - $ref: "#/components/parameters/MasterMigrationPathParameters"
        - $ref: "#/components/parameters/AssignmentQueryParameters"
      responses:
        202:
          description: "Accepted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterMigration"
        404:
          description: "Master Migration not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "User Service"
                error_message: "Error: Master Migration not found"
    delete:
      tags:
        - instructor
      operationId: delete_master_migration
      summary: Delete a master migration
      description: |
        Deletes the specified master migration
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - $ref: "#/components/parameters/MasterMigrationPathParameters"
      responses:
        204:
          description: "No Content"

  /instructor/course/{course_id}/migrations/{master_migration_id}/{migration_id}/scores:
    post:
      tags:
        - instructor
      operationId: upload_raw_scores
      summary: "Upload the scores for a migration"
      description: |
        Upload the raw scores for a student from an external service.
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - $ref: "#/components/parameters/MasterMigrationPathParameters"
        - $ref: "#/components/parameters/MigrationPathParameters"
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        202:
          description: "Accepted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterMigration"
        404:
          description: "Master Migration not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "User Service"
                error_message: "Error: Master Migration not found"

  /instructor/courses/{course_id}/migrations/{master_migration_id}/load_validate:
    post:
      tags:
        - instructor
      operationId: load_validate_master_migration
      summary: "Verify that all information provided in master migration is valid"
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - $ref: "#/components/parameters/MasterMigrationPathParameters"
      responses:
        200:
          description: "OK"
        400:
          description: "Invalid"

  /instructor/courses/{course_id}/migrations/{master_migration_id}/load:
    post:
      tags:
        - instructor
      operationId: load_master_migration
      summary: "Load data for master migration and then lock the migration from further edits"
      description: |
        This function loads all relevant data about the master migration and then locks it for edits
        It additionally moves the migration to next step in the pipeline and prevents it from being moved back.
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - $ref: "#/components/parameters/MasterMigrationPathParameters"
      responses:
        200:
          description: "OK"
        400:
          description: "Invalid"

  /instructor/courses/{course_id}/migrations/{master_migration_id}/{migration_id}/policy:
    post:
      tags:
        - instructor
      operationId: set_policy
      
      summary: sets the policy for a migration
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - $ref: "#/components/parameters/MasterMigrationPathParameters"
        - $ref: "#/components/parameters/MigrationPathParameters"
        - $ref: "#/components/parameters/PolicyQueryParameters"
      responses:
        202:
          description: "Policy set for assignment"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterMigration"
        400:
          description: "Failed to update policy"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_policy"
                error_message: "Failed to update policy for migration"
        404:
          description: "Policy not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_policy"
                error_message: "Failed to update policy for migration"

  /instructor/courses/{course_id}/migrations/{master_migration_id}/apply_validate:
    post:
      tags:
        - instructor
      operationId: apply_validate_master_migration
      summary: "Verify that all information provided in master migration is valid"
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - $ref: "#/components/parameters/MasterMigrationPathParameters"
      responses:
        200:
          description: "OK"
        400:
          description: "Invalid"

  /instructor/courses/{course_id}/migrations/{master_migration_id}/apply:
    post:
      tags:
        - instructor
      operationId: apply_master_migration
      summary: "Apply policies to raw score"
      description: |
        This function applies the policies to the raw scores that exist
        As this is a long running task, it returns a list of tasks that the server is working through
        The migration will be locked until all of the tasks have been completed.
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - $ref: "#/components/parameters/MasterMigrationPathParameters"
      responses:
        202:
          description: "Accepted"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        400:
          description: "Invalid"

  /instructor/courses/{course_id}/migrations/{master_migration_id}/review:
    get:
      tags:
        - instructor
      operationId: get_master_migration_to_review
      summary: "Get all current information about a master migration"
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - $ref: "#/components/parameters/MasterMigrationPathParameters"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MigrationWithScores"
    post:
      tags:
        - instructor
      operationId: review_master_migration
      summary: "Finalize review step for master migration"
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - $ref: "#/components/parameters/MasterMigrationPathParameters"
      responses:
        200:
          description: "OK"
        400:
          description: "Invalid"

  /instructor/courses/{course_id}/migrations/{master_migration_id}/{migration_id}/score:
    post:
      tags:
        - instructor
      operationId: update_student_score
      summary: "Update a student's score"
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - $ref: "#/components/parameters/MasterMigrationPathParameters"
        - $ref: "#/components/parameters/MigrationPathParameters"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MigrationScoreChange"
      responses:
        200:
          description: "OK"
        400:
          description: "Invalid"

  /instructor/courses/{course_id}/migrations/{master_migration_id}/post:
    post:
      tags:
        - instructor
      operationId: post_master_migration
      summary: "post a master migration to canvas"
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - $ref: "#/components/parameters/MasterMigrationPathParameters"
      responses:
        202:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        400:
          description: "Invalid"

  /instructor/courses/{course_id}/migrations/{master_migration_id}/finalize:
    post:
      tags:
        - instructor
      operationId: finalize_master_migration
      summary: "finalize a master migration after its been posted"
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - $ref: "#/components/parameters/MasterMigrationPathParameters"
      responses:
        202:
          description: "OK"
        400:
          description: "Invalid"
  /tasks:
    get:
      tags:
        - tasks
      operationId: get_all_tasks_for_user
      summary: Get all tasks for current user
      description: |
        This endpoint gets all the tasks for the currently signed in user
      
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
  /tasks/{task_id}:
    get:
      tags:
        - tasks
      operationId: get_task
      summary: Get task by id
      description: |
        This endpoint returns the requested task if the user has access to it.
      
      parameters:
        - name: task_id
          required: true
          in: path
          schema:
            type: integer
            format: int64
            example: 219
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "get_task"
                error_message: "Requested task was not found"

  /student/courses/{course_id}:
    get:
      tags:
        - student
      operationId: get_course_information_student
      summary: Get information for a course
      description: |
        Get information from a course from
        the student's perspective; members and
        assignments are not returned but the
        section the student is in is returned.
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudentInformation"

  /student/courses/{course_id}/assignments:
    get:
      tags:
        - student
      operationId: get_course_assignments_student
      summary: Get assignments for course
      description: |
        Get currently released assignments for course
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AssignmentSlim"
  /student/courses/{course_id}/extensions:
    get:
      tags:
        - student
      operationId: get_all_extensions
      summary: "Get all extensions for a student"
      description: |
        Gets all extensions a student has submitted, regardless
        of status.
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LateRequest"
        404:
          description: "Extension not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "User Service"
                error_message: "Error: extension request not found"
    post:
      tags:
        - student
      operationId: create_extension_request
      summary: "Student Extension request"
      description: |
        Create a new extension request for a student.
        Replies with an extension request including the request date, assignment impacted, new due date,
        status, and reason for extension.
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LateRequest"
      responses:
        201:
          description: "An extension request has been created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LateRequest"
        404:
          description: "Extension not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "User Service"
                error_message: "Error: extension request not found"

  /student/courses/{course_id}/extensions/{extension_id}/withdraw:
    delete:
      tags:
        - student
      operationId: withdraw_extension
      summary: "Withdraw a submitted extension"
      description: |
        Deletes (withdraws) a submitted extension
        by id for the given student.
      
      parameters:
        - $ref: "#/components/parameters/CoursePathParameters"
        - $ref: "#/components/parameters/ExtensionPathParameters"
      responses:
        204:
          description: "No Content"
        404:
          description: "Extension not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "User Service"
                error_message: "Error: extension request not found"

components:
  schemas:
    ErrorResponse:
      description: "An error occurred while processing that query"
      type: object
      properties:
        error_source:
          type: string
        error_message:
          type: string
    NewPolicy:
      description: "Create a new policy file"
      type: object
      required:
        - name
        - file_path
        - file_data
      properties:
        name:
          type: string
          example: "Default Policy"
        file_path:
          type: string
          example: "default.js"
        description:
          type: string
          example: |
            The default policy
        file_data:
          type: string
          format: binary
          example: |
            // valid javascript code

    PolicyDryRun:
      description: "A policy dry run request"
      required:
        - file_data
        - raw_score
      properties:
        file_data:
          type: string
          format: binary
          example: |
            // valid javascript code
        raw_score:
          $ref: "#/components/schemas/PolicyRawScore"
        

    PolicyRawScore:
      description: "A raw score for testing a policy"
      type: object
      required:
        - cwid
        - raw_score
        - submission_status
        - extension_status
      properties:
        cwid:
          type: string
          example: "99999999"
        rawScore:
          type: number
          format: double
          example: 19
        minScore:
          type: number
          format: double
          example: 0
        maxScore:
          type: number
          format: double
          example: 10
        initialDueDate:
          type: string
          format: date-time
        submissionDate:
          type: string
          format: date-time
        submissionStatus:
          type: string
          enum:
            - "missing"
            - "excused"
            - "late"
            - "extended"
            - "on_time"
        extensionId:
          type: string
          format: uuid
        extensionDate:
          type: string
          format: date-time
        extensionDays:
          type: integer
          format: int32
        extensionType:
          type: string
        extensionStatus:
          type: string
          enum:
            - ignored
            - approved
            - rejected
            - pending
            - no_extension
            - applied
    PolicyScored:
      required:
        - final_score
        - adjusted_submission_date
        - submission_status
        - extension_status
      properties:
        finalScore:
          type: number 
          format: double
        adjustedDaysLate:
          type: integer
          format: int32
        adjustedSubmissionDate:
          type: string
          format: date-time
        submissionStatus:
          type: string
          enum:
            - "missing"
            - "excused"
            - "late"
            - "extended"
            - "on_time"
        extensionStatus:
          type: string
          enum:
            - ignored
            - approved
            - rejected
            - pending
            - no_extension
            - applied
        extensionMessage:
          type: string
        submissionMessage:
          type: string

    PolicyDryRunResults:
      properties:
        policyResults:
          $ref: "#/components/schemas/PolicyScored"
        errors:
         type: array
         items:
           type: string
        overallStatus:
          type: boolean

    Policy:
      description: "A grading policy"
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "2281A8B8-5EF3-449B-A587-CC7326EC8D41"
        name:
          type: string
          example: "Default Policy"
        description:
          type: string
          example: |
            the default grading policy :)
        uri:
          type: string
          example: "https://s3.aws.com/999-9999-9999-99/default.js"
        number_of_migrations:
          type: integer
          example: 1

    Task:
      description: "An async task on the server"
      type: object
      required:
        - id
        - submitted_time
        - status
      properties:
        id:
          type: integer
          format: int64
          example: 291
        name:
          type: string
          example: "Course Import - Canvas"
        submitted_time:
          type: string
          format: date-time
          example: "2020-01-01T12:00:00.000Z"
        completed_time:
          type: string
          format: date-time
          example: "2020-01-01T12:00:00.000Z"
        status:
          type: string
          example: "COMPLETED"
        message:
          type: string
          example: "A message about the status of the task"

    CourseSyncTask:
      description: "Import a new course from canvas"
      required:
        - canvas_id
      properties:
        canvas_id:
          type: integer
          format: int64
          example: 999999
        overwrite_name:
          type: boolean
          example: false
          default: false
        overwrite_code:
          type: boolean
          example: false
          default: false
        import_users:
          type: boolean
          example: false
          default: false
        import_assignments:
          type: boolean
          example: false
          default: false

    Credential:
      description: "A credential for external service"
      type: object
      required:
        - service
        - owning_user
      properties:
        id:
          type: string
          example: "99-9999-9999-99"
        name:
          type: string
          example: "Cred 1"
        service:
          type: string
          enum:
            - canvas
          example: canvas
        api_key:
          type: string
          example: "a super secure key"
        private:
          type: boolean
          example: true
        owning_user:
          $ref: "#/components/schemas/User"

    Credentials:
      description: "A list of credentials"
      type: array
      items:
        $ref: "#/components/schemas/Credential"

    User:
      description: "A server user"
      type: object
      required:
        - email
        - cwid
        - name
        - enabled
        - admin
      properties:
        email:
          type: string
          format: email
          example: "user@test.com"
        cwid:
          type: string
          example: "99999999"
        name:
          type: string
          example: "Test User"
        admin:
          type: boolean
          example: false
        enabled:
          type: boolean
          example: true

    CourseMember:
      description: "A user in a course"
      type: object
      required:
        - cwid
        - canvas_id
        - course_role
      properties:
        cwid:
          type: string
          example: "99999999"
        canvas_id:
          type: string
          example: "self"
        name:
          type: string
          example: "Jane Doe"
        course_role:
          type: string
          enum:
            - student
            - instructor
            - ta
            - owner
          example: "owner"
        sections:
          type: array
          items:
            type: string
            example: "fall.2020.excl.101.section.a"
        late_passes_used:
          type: number
          format: double
          example: 3

    Assignment:
      description: "An assignment in a course"
      type: object
      required:
        - name
        - points
        - due_date
        - unlock_date
        - enabled
        - category
        - canvas_id
        - group_assignment
      properties:
        id:
          type: string
          format: UUID
          example: "3B7060CE-2C39-4171-8A5D-BF4FE023B475"
        name:
          type: string
          example: "Assessment 1"
        category:
          type: string
          example: "Quiz"
        canvas_id:
          type: integer
          format: int64
          example: 1245678
        points:
          type: number
          format: double
          example: 15.0
        external_service:
          type: string
          example: "Gradescope"
        external_points:
          type: number
          format: double
          example: 14.0
        due_date:
          type: string
          format: date-time
          example: "2020-01-15T12:00:00.000Z"
        unlock_date:
          type: string
          format: date-time
          example: "2020-01-01T12:00:00.000Z"
        enabled:
          type: boolean
          example: true
        group_assignment:
          type: boolean
          example: true
        attention_required:
          type: boolean
          example: false
        frozen:
          type: boolean
          example: false

    AssignmentSlim:
      description: "An slim assignment in a course"
      type: object
      required:
        - id
        - name
        - points
        - due_date
        - unlock_date
        - category
      properties:
        id:
          type: string
          format: UUID
          example: "3B7060CE-2C39-4171-8A5D-BF4FE023B475"
        name:
          type: string
          example: "Assessment 1"
        points:
          type: number
          format: double
          example: 15.0
        due_date:
          type: string
          format: date-time
          example: "2020-01-15T12:00:00.000Z"
        unlock_date:
          type: string
          format: date-time
          example: "2020-01-01T12:00:00.000Z"
        category:
          type: string
          example: "Quiz"

    Course:
      description: "A complete course"
      type: object
      required:
        - term
        - enabled
        - name
        - canvas_id
        - late_request_config
      properties:
        id:
          type: string
          format: uuid
          example: "66FEF953-85F9-448E-B36A-B632754A867E"
        term:
          type: string
          example: "Fall 2020"
        enabled:
          type: boolean
          example: true
        name:
          type: string
          example: "EXCL101"
        code:
          type: string
          example: "Fall.2020.EXCL.101"
        canvas_id:
          type: integer
          format: int64
          example: 123456
        gradescope_id:
          type: integer
          format: int64
          example: 123456
        members:
          type: array
          items:
            $ref: "#/components/schemas/CourseMember"
        assignments:
          type: array
          items:
            $ref: "#/components/schemas/Assignment"
        sections:
          type: array
          items:
            type: string
          example:
            - "fall.2020.excl.101.section.a"
        late_request_config:
          $ref: "#/components/schemas/CourseLateRequestConfig"

    CourseLateRequestConfig:
      description: "The late request config for a course"
      type: object
      required:
        - late_passes_enabled
        - late_pass_name
        - enabled_extension_reasons
        - total_late_passes_allowed
      properties:
        late_passes_enabled:
          type: boolean
          example: true
        enabled_extension_reasons:
          type: array
          items:
            type: string
          example: ["illness", "excused absence"]
        total_late_passes_allowed:
          type: integer
          example: 5
        late_pass_name:
          type: string
          example: "Late Passes"

    Enrollment:
      description: "A slim course and a CourseMember"
      type: object
      required:
        - term
        - name
        - code
        - cwid
        - course_role
      properties:
        id:
          type: string
          format: uuid
          example: "66FEF953-85F9-448E-B36A-B632754A867E"
        term:
          type: string
          example: "Fall 2020"
        name:
          type: string
          example: "EXCL101"
        code:
          type: string
          example: "Fall.2020.EXCL.101"
        cwid:
          type: string
          example: "99999999"
        course_role:
          type: string
          enum:
            - student
            - instructor
            - ta
            - owner
          example: "owner"
        enabled:
          type: boolean
          example: true
    StudentInformation:
      description: "Information relevant to a student"
      type: object
      required:
        - course_role
        - professor
        - course
      properties:
        course_role:
          type: string
          enum:
            - student
            - instructor
            - ta
            - owner
          example: "student"
        professor:
          type: string
          example: "Jane Doe"
        late_passes_used:
          type: number
          format: double
          example: 3
        course:
          $ref: "#/components/schemas/Course"

    LateRequest:
      description: "A generic request for extending work deadlines"
      type: object
      required:
        - date_submitted
        - num_days_requested
        - user_requester
        - status
        - request_type
      properties:
        id:
          type: string
          format: uuid
          example: "F23666B6-A34A-421A-8764-BC72EB7B0E20"
        assignment_id:
          type: string
          format: uuid
          example: "5DF9E336-8E79-4E19-9C3E-C071DBB25A26"
        assignment_name:
          type: string
          example: "Assessment 11"
        date_submitted:
          type: string
          format: date-time
          example: "2020-01-01T12:00:00.000Z"
        num_days_requested:
          type: integer
          format: int32
          example: 2
        extension:
          $ref: "#/components/schemas/Extension"
        user_requester_id:
          type: string
          example: "9999999"
        status:
          type: string
          enum:
            - pending
            - approved
            - rejected
          example: "Extension pending instructor approval"
        request_type:
          type: string
          enum:
            - extension
            - late_pass
          example: "Late Pass"

    Extension:
      description: "An extension for an assignment"
      type: object
      required:
        - reason
        - comments
      properties:
        id:
          type: string
          format: uuid
          example: "26704EEE-7182-45F1-B8FE-27ACCCEC833E"
        reason:
          type: string
          example: "Tech Issues"
        user_reviewer:
          $ref: "#/components/schemas/CourseMember"
        response_timestamp:
          type: string
          format: date-time
          example: "2020-01-01T12:00:00.000Z"
        comments:
          type: string
          example: "Some comment about the work"
        response_to_requester:
          type: string
          example: "Your 3 day extension for illness is approved"

    MasterMigration:
      description: "The master migration that contains to the list of migration objects"
      type: object
      required:
        - migration_list
      properties:
        id:
          type: string
          format: uuid
          example: "1183B0E0-5E39-429F-810E-2D64243C074E"
        migrator:
          $ref: "#/components/schemas/User"
        date_started:
          type: string
          format: date-time
          example: "2020-01-01T12:00:00.000Z"
        status:
          type: string
          enum:
            - created
            - started
            - awaiting_review
            - ready_to_post
            - posting
            - loaded
            - completed
        migrations:
          type: array
          items:
            $ref: "#/components/schemas/Migration"

    MasterMigrationStatistics:
      description: "The statistics from a master migration, has the number of: extensions, late penalties, missing, no credit"
      type: object
      required:
        - total_submission
        - late_requests
        - total_extensions
        - total_late_passes
        - unapproved_requests
      properties:
        total_submission:
          type: integer
          example: 2
        late_requests:
          type: integer
          example: 12
        total_extensions:
          type: integer
          example: 1
        total_late_passes:
          type: integer
          example: 5
        unapproved_requests:
          type: integer
          example: 3

    Migration:
      description: "Migration object that has a single assignment and a policy"
      type: object
      required:
        - assignment
        - policy
      properties:
        id:
          type: string
          format: uuid
          example: "1183B0E0-5E39-429F-810E-2D64243C074E"
        assignment:
          $ref: "#/components/schemas/Assignment"
        policy:
          $ref: "#/components/schemas/Policy"

    MigrationScoreChange:
      description: "Change a students score during the review phase of a migration"
      type: object
      required:
        - cwid
        - new_score
        - justification
        - submission_status
      properties:
        cwid:
          type: string
          example: 9999999
        new_score:
          type: number
          format: double
          example: 10
        adjusted_submission_date:
          type: string
          format: date-time
          example: "2020-01-01T12:00:00.000Z"
        submission_status:
          type: string
          enum:
            - "missing"
            - "excused"
            - "late"
            - "extended"
            - "on_time"
        justification:
          type: string
          example: "10 points bc you are cool :)"

    Score:
      description: "A score for a student"
      type: object
      properties:
        student:
          $ref: "#/components/schemas/CourseMember"
        status:
          type: string
        score:
          type: number
          format: double
          example: 10
        submission_date:
          type: string
          format: date-time
          example: "2020-01-01T12:00:00.000Z"
        comment:
          type: string
          example: "An extension was applied :)"
        raw_score:
          type: number
          format: double
          example: 7.5
        days_late:
          type: integer
          example: 0

    MigrationWithScores:
      description: "A migration for an assignment that contains scores for each student"
      type: object
      required:
        - scores
      properties:
        migration_id:
          type: string
          format: uuid
          example: "1183B0E0-5E39-429F-810E-2D64243C074E"
        assignment:
          $ref: "#/components/schemas/AssignmentSlim"
        scores:
          type: array
          items:
            $ref: "#/components/schemas/Score"
        stats:
          $ref: "#/components/schemas/MasterMigrationStatistics"

  parameters:
    CourseQueryParameters:
      name: "course_id"
      in: query
      required: true
      schema:
        type: string
        format: uuid
        example: "9DEB34FC-C15A-4B31-8374-91EC1C8E9E66"
    CoursePathParameters:
      name: "course_id"
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: "9DEB34FC-C15A-4B31-8374-91EC1C8E9E66"
    AssignmentQueryParameters:
      name: "assignment_id"
      in: query
      required: true
      schema:
        type: string
        format: uuid
        example: "3697C75D-8DB6-447F-AAA0-0DB129EFEC45"
    AssignmentPathParameters:
      name: "assignment_id"
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: "3697C75D-8DB6-447F-AAA0-0DB129EFEC45"
    PolicyPathParameters:
      name: policy_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: "55AAD0CC-9C92-47E9-9293-05CBED73A4AB"
    PolicyQueryParameters:
      name: policy_id
      in: query
      required: true
      schema:
        type: string
        format: uuid
        example: "55AAD0CC-9C92-47E9-9293-05CBED73A4AB"
    CwidPathParameters:
      name: "cwid"
      in: path
      required: true
      schema:
        type: string
        example: "99999999"
    ExtensionPathParameters:
      name: extension_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: "452E7EC3-29BD-4B3B-94FD-5AE9901257AA"
    MasterMigrationPathParameters:
      name: master_migration_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: "49D2FB6A-598A-4618-A467-C71D6542D14F"
    MigrationPathParameters:
      name: migration_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: "A9DC1F84-C6A7-4201-86CF-116DFE4E59EC"
