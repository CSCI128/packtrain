openapi: "3.0.0"
servers:
  - url: https://localhost.dev/api
    description: Local Development

info:
  title: Grading Admin
  description: |
    This API defines the operations required manage grades for classes
    that utilize multiple platforms while respecting custom late policies
  version: 0.0.1
  license:
    name: MIT # We may need to license this differently

security:
  - openIDC: [user:read] # at a base level, all users must at least be a user to access anything

tags:
  - name: health
    description: Health checks for grading server
  - name: admin
    description: Administration functions for the grading server
  - name: user
    description: User management functions for the grading server
  - name: instructor
    description: Instructor functions for the grading server
  - name: tasks
    description: Async task service for the grading server

paths:
  /-/health:
    get:
      tags:
        - health
      operationId: check_health
      summary: Checks the health of the server
      responses:
        200:
          description: ok
        500:
          description: "Server is unhealthy"
  /admin/courses:
    get:
      tags:
        - admin
      operationId: get_courses
      summary: "Get all courses"
      description: |
        Get all courses, returning
        only active courses by default, and
        inactive courses if specified. Will
        return an empty list if there are no
        courses.
      security:
        - openIDC: [admin:read]
      parameters:
        - name: onlyActive
          in: query
          required: false
          schema:
            type: boolean
            example: true
            default: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Course"
    post:
      tags:
        - admin
      operationId: new_course
      summary: "Create a new course"
      description: |
        Create a new course.
      security:
        - openIDC: [admin:write]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course"
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"

  /admin/courses/{course_id}:
    put:
      tags:
        - admin
      operationId: update_course
      summary: Update existing course
      description: |
        Update an existing course by replacing all content in the course.
        If any assignments have been graded, then this will fail.
      security:
        - openIDC: [admin:write]
      parameters:
        - name: "course_id"
          in: path
          required: true
          schema:
            type: string
            example: "999-9999-9999-99"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course"
      responses:
        201:
          description: "Updated course"
        404:
          description: "Course does not exist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "course_creation"
                error_message: "Course '999-9999-9999-99' does not exist"
        400:
          description: "Refused to update course"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "course_creation"
                error_message: "Refusing to update course. At least one assignment has been graded."
    get:
      tags:
        - admin
      operationId: get_course
      summary: Get existing course
      description: |
        Gets a course
      security:
        - openIDC: [admin:read]
      parameters:
        - name: "course_id"
          in: path
          required: true
          schema:
            type: string
            example: "999-9999-9999-99"
        - name: "include"
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - members
                - assignments
                - sections
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
        404:
          description: "Course does not exist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "course_creation"
                error_message: "Course '999-9999-9999-99' does not exist"
  /admin/courses/{course_id}/import:
    post:
      tags:
        - admin
      operationId: import_course
      summary: "Import course from Canvas"
      description: |
        Imports data from Canvas into an existing course
      security:
        - openIDC: [admin:write]
      parameters:
        - name: course_id
          required: true
          description: "The course id"
          in: path
          schema:
            type: string
            example: "999-9999-9999-99"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CourseSyncTask"
      responses:
        202:
          description: "Task Queued"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        404:
          description: "Course not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "Course Service"
                error_message: "Error: course id not found"
        403:
          description: "An authentication error occurred"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "Canvas Service"
                error_message: "Error: invalid token"

  /admin/courses/{course_id}/sync:
    post:
      tags:
        - admin
      operationId: sync_course
      summary: "Sync with established course controller"
      description: |
        Syncs with a course in the controller.
      security:
        - openIDC: [admin:write]
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
            example: "999-9999-9999-99"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CourseSyncTask"
      responses:
        202:
          description: "Accepted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        403:
          description: "An authentication error occurred"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "Canvas Service"
                error_message: "Error: invalid token"
        404:
          description: Course Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_course"
                error_message: "Course '999-9999-9999-99' does not exist"

  /admin/courses/{course_id}/assignments:
    put:
      tags:
        - admin
      operationId: update_assignment
      summary: "Update an assignment in a course"
      description: |
        Update an assignment in a course
      security:
        - openIDC: [admin:write]
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
            example: "999-9999-9999-99"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Assignment"
      responses:
        201:
          description: "Accepted"
        404:
          description: Course Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_course"
                error_message: "Course '999-9999-9999-99' does not exist"
    post:
      tags:
        - admin
      operationId: add_assignment
      summary: "Add assignment to a course"
      description: |
        Add assignments to a course.
        If any assignment already exist in the class (based off of the TODO), 
        their information will be updated.
      security:
        - openIDC: [admin:write]
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
            example: "999-9999-9999-99"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Assignment"
      responses:
        201:
          description: "Accepted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Assignment"
        404:
          description: Course Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_course"
                error_message: "Course '999-9999-9999-99' does not exist"

  /admin/courses/{course_id}/enable:
    put:
      tags:
        - admin
      operationId: enable_course
      summary: "Enable the specified course."
      description: |
        Enable the specified course.
      security:
        - openIDC: [admin:write]
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
            example: "999-9999-9999-99"
      responses:
        202:
          description: "Accepted"
        404:
          description: Course Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_course"
                error_message: "Course '999-9999-9999-99' does not exist"
  /admin/courses/{course_id}/disable:
    put:
      tags:
        - admin
      operationId: disable_course
      summary: "Disable the specified course."
      description: |
        Disable the specified course.
      security:
        - openIDC: [admin:write]
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
            example: "999-9999-9999-99"
      responses:
        202:
          description: "Accepted"
        404:
          description: Course Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_course"
                error_message: "Course '999-9999-9999-99' does not exist"
  /admin/courses/{course_id}/assignment/{assignment_id}/disable:
    put:
      tags:
        - admin
      operationId: disable_assignment
      summary: "Disable the specified assignment."
      description: |
        Disable the specified assignment.
      security:
        - openIDC: [admin:write]
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
            example: "999-9999-9999-99"
        - name: assignment_id
          in: path
          required: true
          schema:
            type: string
            example: "999-9999-9999-99"
      responses:
        200:
          description: "OK"
        404:
          description: "Assignment not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: disable_assignment
                error_message: "Assignment '999-9999-9999-99' does not exist"

  /admin/courses/{course_id}/assignment/{assignment_id}/enable:
    put:
      tags:
        - admin
      operationId: enable_assignment
      summary: "Enable the specified assignment."
      description: |
        Enable the specified assignment.
      security:
        - openIDC: [admin:write]
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
            example: "999-9999-9999-99"
        - name: assignment_id
          in: path
          required: true
          schema:
            type: string
            example: "999-9999-9999-99"
      responses:
        200:
          description: "OK"
        404:
          description: "Assignment not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: enable_assignment
                error_message: "Assignment '999-9999-9999-99' does not exist"
  /admin/courses/{course_id}/members:
    get:
      tags:
        - admin
      operationId: get_members
      security:
        - openIDC: [admin:read]
      summary: "Get all members for a course"
      description: |
        Gets all members for a course.
        Optional query params can be used to filter by TAs, Instructors, or Students.
        Can also be used to search by CWID or by name
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
            example: "999-9999-9999-99"
        - name: "enrollments"
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - tas
                - instructors
                - students
        - name: "name"
          in: query
          required: false
          schema:
            type: string
            description: "Part of (or full) name to search for"
            example: "Alex"
        - name: "cwid"
          in: query
          required: false
          schema:
            type: string
            description: "Part of (or full) cwid to search for"
            example: "9999999"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CourseMember"
        404:
          description: Course Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_course"
                error_message: "Course '999-9999-9999-99' does not exist"
    post:
      tags:
        - admin
      operationId: add_course_member
      summary: "Add a member to a course"
      description: |
        Adds a member to a course. 
        If they already exist, the request is rejected.
        If the user does not exist in system, then the request is rejected.
      security:
        - openIDC: [admin:write]
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
            example: "999-9999-9999-99"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CourseMember"
      responses:
        201:
          description: "Created"
        404:
          description: Course Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_course"
                error_message: "Course '999-9999-9999-99' does not exist"
    put:
      tags:
        - admin
      operationId: update_course_member
      summary: "Updates a member's membership in a course"
      description: |
        Updates a member in a course. If they do not exist, then they are rejected.
      security:
        - openIDC: [admin:write]
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
            example: "999-9999-9999-99"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CourseMember"
      responses:
        201:
          description: "Created"
        404:
          description: Course Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_course"
                error_message: "Course '999-9999-9999-99' does not exist"

  /admin/users:
    get:
      tags:
        - admin
      operationId: get_all_users
      summary: "Get all users"
      description: |
        Gets all the users in the system
      security:
        - openIDC: [admin:read]
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

    post:
      tags:
        - admin
      operationId: create_user
      summary: "Create a new user"
      description: |
        Creates a new user.
      security:
        - openIDC: [admin:write]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: "Created"
        400:
          description: "Failed to create new user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "create_user"
                error_message: "Failed to create new user"

  /admin/users/{cwid}/enable:
    put:
      tags:
        - admin
      operationId: enable_user
      summary: "enable a user"
      description: |
        Enables a user
      security:
        - openIDC: [admin:write]
      parameters:
        - name: cwid
          in: path
          required: true
          schema:
            type: string
            example: "99999999"
      responses:
        201:
          description: "Created"
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Failed to update user"

  /admin/users/{cwid}/disable:
    put:
      tags:
        - admin
      operationId: disable_user
      summary: "disable a user"
      description: |
        Disables a user
      security:
        - openIDC: [admin:write]
      parameters:
        - name: cwid
          in: path
          required: true
          schema:
            type: string
            example: "99999999"
      responses:
        201:
          description: "Created"
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Failed to update user"

  /admin/users/{cwid}/admin:
    put:
      tags:
        - admin
      operationId: make_admin
      summary: "Make a user an admin"
      description: |
        Make a user an admin.
        This will fail if the account is disabled or if the requested user is enrolled as a student in any classes
      security:
        - openIDC: [admin:write]
      parameters:
        - name: cwid
          in: path
          required: true
          schema:
            type: string
            example: "99999999"
      responses:
        202:
          description: "Accepted"
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Failed to update user"

  /user:
    get:
      tags:
        - user
      operationId: get_user
      security:
        - openIDC: [user:read]
      summary: Gets a user's information
      description: |
        Gets a user's information based on the provided JWT.
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

    put:
      tags:
        - user
      operationId: update_user
      security:
        - openIDC: [user:write]
      summary: Updates a user's information
      description: |
        Updates a user's information based on the User provided in body and provided JWT.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        202:
          description: "Accepted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /user/credentials:
    post:
      tags:
        - user
      operationId: new_credential
      summary: Create a new credential for the user
      description: |
        Create a new credential for a user.

        The credential must have a unique name for the user.
        It must also be the only credential for a service.
      security:
        - openIDC: [user:write]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Credential"
      responses:
        202:
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credential"
        400:
          description: "Failed to create new credential"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Failed to create new credential for user"
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "User '999-9999-9999-99' does not exist!"

    get:
      tags:
        - user
      operationId: get_credentials
      summary: Get all credentials for a user
      description: |
        Gets all credentials for the signed in user.
        A user can only view their own credentials (including admins)
      security:
        - openIDC: [user:read]
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credentials"
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "User '999-9999-9999-99' does not exist!"

  /user/credentials/{credential_id}/disable:
    put:
      tags:
        - user
      operationId: disable_credential
      summary: Disables a credential for the user.
      description: |
        Disables a selected credential for the user.
      security:
        - openIDC: [user:write]
      parameters:
        - name: credential_id
          in: path
          required: true
          schema:
            type: string
            example: "99-9999-9999-99"

      responses:
        202:
          description: "Accepted"
        400:
          description: "Failed to disable credential"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Failed to disable credential for user"
        404:
          description: "Credential not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Credential '99-9999-9999-99' does not exist!"

  /user/credentials/{credential_id}/public:
    put:
      tags:
        - user
      operationId: mark_credential_as_public
      summary: Changes the visibility of the credential to public for the user.
      description: |
        Sets a credential's status to public for the user.
      security:
        - openIDC: [user:write]
      parameters:
        - name: credential_id
          in: path
          required: true
          schema:
            type: string
            example: "99-9999-9999-99"
      responses:
        202:
          description: "Accepted"
        400:
          description: "Failed to set credential to public"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Failed to set credential to public for user"
        404:
          description: "Credential not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Credential '99-9999-9999-99' does not exist!"

  /user/credentials/{credential_id}/private:
    put:
      tags:
        - user
      operationId: mark_credential_as_private
      summary: Changes the visibility of the credential to private for the user.
      description: |
        Sets a credential's status to private for the user.
      security:
        - openIDC: [user:write]
      parameters:
        - name: credential_id
          in: path
          required: true
          schema:
            type: string
            example: "99-9999-9999-99"
      responses:
        202:
          description: "Accepted"
        400:
          description: "Failed to set credential to private"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Failed to set credential to private for user"
        404:
          description: "Credential not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Credential '99-9999-9999-99' does not exist!"

  /instructor/courses/{course_id}/assignment/{assignment_id}/user/{user_id}/extensions/{extension_id}/approve:
    put:
      tags:
        - instructor
      operationId: approve_extension
      summary: Approves an extension for an assignment for the user.
      description: |
        Approves an extension for an assignment for the user.
      security:
        - openIDC: [instructor:write]
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
            example: "99-9999-9999-99"
        - name: assignment_id
          in: path
          required: true
          schema:
            type: string
            example: "99-9999-9999-99"
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            example: "11111111"
        - name: extension_id
          in: path
          required: true
          schema:
            type: string
            example: "99-9999-9999-99"

      responses:
        202:
          description: "Accepted"
        400:
          description: "Failed to approve extension"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Failed to approve extension for user"
        404:
          description: "Extension not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Failed to approve extensions for user"

  /instructor/courses/{course_id}/assignment/{assignment_id}/user/{user_id}/extensions/{extension_id}/deny:
    put:
      tags:
        - instructor
      operationId: deny_extension
      summary: Denies an extension for an assignment for the user.
      description: |
        Denies an extension for an assignment for the user.
      security:
        - openIDC: [instructor:write]
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
            example: "99-9999-9999-99"
        - name: assignment_id
          in: path
          required: true
          schema:
            type: string
            example: "99-9999-9999-99"
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            example: "11111111"
        - name: extension_id
          in: path
          required: true
          schema:
            type: string
            example: "99-9999-9999-99"

      responses:
        202:
          description: "Accepted"
        400:
          description: "Failed to deny extension"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Failed to deny extension for user"
        404:
          description: "Extension not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "Failed to deny extension for user"

  /instructor/courses/{course_id}/policies:
    post:
      tags:
        - instructor
      operationId: new_policy
      summary: Create a new policy
      description: |
        Create a new policy for the course
      security:
        - openIDC: [instructor:write]
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
            example: "999-9999-9999-99"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/NewPolicy"
            encoding:
              file_data:
                contentType: "text/javascript"
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
    get:
      tags:
        - instructor
      operationId: get_all_policies
      summary: Get all policies
      description: |
        Get all policies for a course
      security:
        - openIDC: [instructor:read]
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
            example: "999-9999-9999-99"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Policy"

  /instructor/courses/{course_id}:
    get:
      tags:
        - instructor
      operationId: get_course_information_instructor
      summary: Get information for a course
      description: |
        Get information from a course from
        the instructor's perspective; returns
        members as an aggregate of all members
        in their sections.
      security:
        - openIDC: [instructor:read]
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
            example: "999-9999-9999-99"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"

  /instructor/courses/{course_id}/enrollments:
    get:
      tags:
        - instructor
      operationId: get_instructor_enrollments
      security:
        - openIDC: [instructor:read]
      summary: "Get all enrollments for all sections"
      description: |
        Gets user enrollments for all sections 
        an instructor is apart of.
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
            example: "999-9999-9999-99"
        - name: "name"
          in: query
          required: false
          schema:
            type: string
            description: "Part of (or full) name to search for"
            example: "Alex"
        - name: "cwid"
          in: query
          required: false
          schema:
            type: string
            description: "Part of (or full) cwid to search for"
            example: "9999999"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CourseMember"
        404:
          description: Course Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_course"
                error_message: "Course '999-9999-9999-99' does not exist"

  /student/courses/{course_id}:
    get:
      tags:
        - student
      operationId: get_course_information_student
      summary: Get information for a course
      description: |
        Get information from a course from
        the student's perspective; members and
        assignments are not returned but the
        section the student is in is returned.
      security:
        - openIDC: [student:read]
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
            example: "999-9999-9999-99"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"

  /student/enrollments:
    get:
      tags:
        - user
      operationId: get_enrollments
      security:
        - openIDC: [user:read]
      summary: "Get all enrollments for a user"
      description: |
        Gets all enrollments (classes) that a
        user is apart of.
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Course"
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "update_user"
                error_message: "User '999-9999-9999-99' does not exist!"

  /student/courses/{course_id}/assignments:
    get:
      tags:
        - student
      operationId: get_course_assignments_student
      summary: Get assignments for course
      description: |
        Get currently released assignments for course
      security:
        - openIDC: [student:read]
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
            example: "999-9999-9999-99"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Assignment"

  /tasks:
    get:
      tags:
        - tasks
      operationId: get_all_tasks_for_user
      summary: Get all tasks for current user
      description: |
        This endpoint gets all the tasks for the currently signed in user
      security:
        - openIDC: [user:read]
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
  /tasks/{task_id}:
    get:
      tags:
        - tasks
      operationId: get_task
      summary: Get task by id
      description: |
        This endpoint returns the requested task if the user has access to it.
      security:
        - openIDC: [user:read]
      parameters:
        - name: task_id
          required: true
          in: path
          schema:
            type: integer
            format: int64
            example: 219
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "get_task"
                error_message: "Requested task was not found"

  /instructor/courses/{course_id}/assignments/{assignment_id}/user/{user_id}/extensions:
    post:
      tags:
        - instructor
      operationId: new_extension
      summary: "Create Extension request"
      description: |
        Create a new extension request for an assignment.
        Replies with an extension request for a user and assignment.
      security:
        - openIDC: [ instructor:write ]
      parameters:
        - name: course_id
          required: true
          description: "The course ID"
          in: path
          schema:
            type: string
            example: "999-9999-9999-99"
        - name: assignment_id
          required: true
          description: "The assignment ID"
          in: path
          schema:
            type: string
            example: "999-9999-9999-99"
        - name: user_id
          required: true
          description: "The user's CWID"
          in: path
          schema:
            type: string
            example: "11111111"
        - name: extension_id
          required: true
          description: "The extension ID"
          in: path
          schema:
            type: string
            example: "999-9999-9999-99"
      responses:
        201:
          description: "An extension request has been created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Extension"
        404:
          description: "Extension not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "User Service"
                error_message: "Error: extension request not found"

  /instructors/courses/{course_id}/assignments/{assignment_id}/extensions/{extension_id}:
    get:
      tags:
        - instructor
      operationId: get_all_approved_extensions_for_assignment
      summary: Get all the approved extensions for the provided course and assignment
      description: |
        This endpoint gets all approved extensions for a given instructor
      security:
        - openIDC: [ instructor:read ]
      parameters:
        - name: course_id
          required: true
          description: "The course ID"
          in: path
          schema:
            type: string
            example: "999-9999-9999-99"
        - name: assignment_id
          required: true
          description: "The assignment ID"
          in: path
          schema:
            type: string
            example: "999-9999-9999-99"
        - name: extension_id
          required: true
          description: "The extension ID"
          in: path
          schema:
            type: string
            example: "999-9999-9999-99"
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - approved
              - denied
              - pending
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "Extension not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "User Service"
                error_message: "Error: extension request not found"

  /instructors/courses/{course_id}/users/{user_id}/extensions/{extension_id}:
    get:
      tags:
        - instructor
      operationId: get_all_approved_extensions_for_member
      summary: Get all the approved extensions for the provided member
      description: |
        This endpoint gets all approved extensions for a given member
      security:
        - openIDC: [ instructor:read ]
      parameters:
        - name: course_id
          required: true
          description: "The course ID"
          in: path
          schema:
            type: string
            example: "999-9999-9999-99"
        - name: user_id
          required: true
          description: "The user's CWID"
          in: path
          schema:
            type: string
            example: "11111111"
        - name: extension_id
          required: true
          description: "The extension ID"
          in: path
          schema:
            type: string
            example: "999-9999-9999-99"
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - approved
              - denied
              - pending
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "Extension not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "User Service"
                error_message: "Error: extension request not found"

  /instructors/courses/{course_id}/sections/{section_id}/extensions/{extension_id}:
    get:
      tags:
        - instructor
      operationId: get_all_extensions_for_section
      summary: Get all the extensions for the provided section
      description: |
        This endpoint gets all extensions for a given section
      security:
        - openIDC: [ instructor:read ]
      parameters:
        - name: course_id
          required: true
          description: "The course ID"
          in: path
          schema:
            type: string
            example: "999-9999-9999-99"
        - name: section_id
          required: true
          description: "The course section"
          in: path
          schema:
            type: string
            example: "Section F"
        - name: extension_id
          required: true
          description: "The extension ID"
          in: path
          schema:
            type: string
            example: "999-9999-9999-99"
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - approved
              - denied
              - pending
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "Extension not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "User Service"
                error_message: "Error: extension request not found"



  /admin/courses/{course_id}/extensions:
    get:
      tags:
        - admin
      operationId: get_all_extensions_for_course
      summary: Get all the extensions for the course
      description: |
        This endpoint gets all extensions for a given course
      security:
        - openIDC: [ admin:read ]
      parameters:
        - name: course_id
          required: true
          description: "The course ID"
          in: path
          schema:
            type: string
            example: "999-9999-9999-99"
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - approved
              - denied
              - pending
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "Extension not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error_source: "User Service"
                error_message: "Error: extension request not found"

components:
  securitySchemes:
    OpenIDC:
      type: openIdConnect
      openIdConnectUrl: https://localhost.dev/auth/application/o/gradingadmin/.well_known

  schemas:
    ErrorResponse:
      description: "An error occurred while processing that query"
      type: object
      properties:
        error_source:
          type: string
        error_message:
          type: string
    NewPolicy:
      description: "Create a new policy file"
      type: object
      required:
        - name
        - file_path
        - file_data
      properties:
        name:
          type: string
          example: "Default Policy"
        file_path:
          type: string
          example: "default.js"
        file_data:
          type: string
          format: binary
          example: |
            // valid javascript code

    Policy:
      description: "A grading policy"
      type: object
      properties:
        name:
          type: string
          example: "Default Policy"
        uri:
          type: string
          example: "https://s3.aws.com/999-9999-9999-99/default.js"
        course:
          $ref: "#/components/schemas/Course"
        assignment:
          $ref: "#/components/schemas/Assignment"

    Task:
      description: "An async task on the server"
      type: object
      required:
        - id
        - submitted_time
        - status
      properties:
        id:
          type: integer
          format: int64
          example: 291
        submitted_time:
          type: string
          format: date-time
          example: "2020-01-01T12:00:00.000Z"
        completed_time:
          type: string
          format: date-time
          example: "2020-01-01T12:00:00.000Z"
        status:
          type: string
          example: "COMPLETED"
        message:
          type: string
          example: "A message about the status of the task"

    CourseSyncTask:
      description: "Import a new course from canvas"
      required:
        - canvas_id
      properties:
        canvas_id:
          type: integer
          format: int64
          example: 999999
        overwrite_name:
          type: boolean
          example: false
          default: false
        overwrite_code:
          type: boolean
          example: false
          default: false
        import_users:
          type: boolean
          example: false
          default: false
        import_assignments:
          type: boolean
          example: false
          default: false

    Credential:
      description: "A credential for external service"
      type: object
      required:
        - service
        - owning_user
      properties:
        id:
          type: string
          example: "99-9999-9999-99"
        name:
          type: string
          example: "Cred 1"
        service:
          type: string
          enum:
            - canvas
            - gradescope
          example: canvas
        api_key:
          type: string
          example: "a super secure key"
        private:
          type: boolean
          example: true
        active:
          type: boolean
          example: true
        owning_user:
          $ref: "#/components/schemas/User"

    Credentials:
      description: "A list of credentials"
      type: array
      items:
        $ref: "#/components/schemas/Credential"

    User:
      description: "A server user"
      type: object
      required:
        - email
        - cwid
        - name
        - admin
      properties:
        email:
          type: string
          format: email
          example: "user@test.com"
        cwid:
          type: string
          example: "99999999"
        name:
          type: string
          example: "Test User"
        admin:
          type: boolean
          example: false
        enabled:
          type: boolean
          example: true

    CourseMember:
      description: "A user in a course"
      type: object
      required:
        - cwid
        - canvas_id
        - course_role
      properties:
        cwid:
          type: string
          example: "99999999"
        canvas_id:
          type: string
          example: "self"
        course_role:
          type: string
          enum:
            - student
            - instructor
            - ta
            - owner
          example: "owner"
        sections:
          type: array
          items:
            type: string
            example: "fall.2020.excl.101.section.a"

    Assignment:
      description: "An assignment in a course"
      type: object
      required:
        - id
        - name
        - points
        - due_date
        - unlock_date
        - enabled
        - category
        - canvas_id
      properties:
        id:
          type: string
          example: "999-9999-9999-99"
        name:
          type: string
          example: "Assessment 1"
        points:
          type: number
          format: double
          example: 15.0
        due_date:
          type: string
          format: date-time
          example: "2020-01-15T12:00:00.000Z"
        unlock_date:
          type: string
          format: date-time
          example: "2020-01-01T12:00:00.000Z"
        enabled:
          type: boolean
          example: true
        category:
          type: string
          example: "Quiz"
        canvas_id:
          type: string
          example: "12345678"
    Course:
      description: "A complete course"
      type: object
      required:
        - term
        - enabled
        - name
        - code
        - canvas_id
      properties:
        id:
          type: string
          example: "999-9999-9999-99"
        term:
          type: string
          example: "Fall 2020"
        enabled:
          type: boolean
          example: true
        name:
          type: string
          example: "EXCL101"
        code:
          type: string
          example: "Fall.2020.EXCL.101"
        canvas_id:
          type: integer
          format: int64
          example: 123456
        members:
          type: array
          items:
            $ref: "#/components/schemas/CourseMember"
        assignments:
          type: array
          items:
            $ref: "#/components/schemas/Assignment"
        sections:
          type: array
          items:
            type: string
          example:
            - "fall.2020.excl.101.section.a"

    Extension:
      description: "An extension for an assignment"
      type: object
      required:
        - assignments
        - date_submitted
        - num_days_requested
        - user_requester
      properties:
        id:
          type: string
          example: "999-9999-9999-99"
        assignments:
          type: array
          items:
            $ref: "#/components/schemas/Assignment"
        date_submitted:
          type: string
          format: date-time
          example: "2020-01-01T12:00:00.000Z"
        num_days_requested:
          type: integer
          example: 2
        user_requester:
          type: string
          items:
            $ref: "#/components/schemas/CourseMember"
        status:
          type: string
          enum:
            - pending
            - approved
            - rejected
          example: "Extension pending instructor approval"
        request_type:
          type: string
          enum:
            - extension
            - late_pass
          example: "Late Pass"
        user_reviewer:
          type: string
          items:
            $ref: "#/components/schemas/CourseMember"
        response_timestamp:
          type: string
          format: date-time
          example: "2020-01-01T12:00:00.000Z"
        reason:
          type: string
          example: "Excused absence"
        response_to_requester:
          type: string
          example: "Your 3 day extension for illness is approved"

    MasterMigration:
      description: "The master migration that contains to the list of migration objects"
      type: object
      required:
        - migration_list
      properties:
        migration_list:
          type: array
          items:
            $ref: "#/components/schemas/Migration"

    MasterMigrationStatistics:
      description: "The statistics from a master migration, has the number of: extensions, late penalties, missing, no credit"
      type: object
      required:
        - missing
        - extensions_applied
        - no_credit
        - late_penalties
      properties:
        missing:
          type: integer
          example: 2
        extensions_applied:
          type: integer
          example: 12
        no_credit:
          type: integer
          example: 1
        late_penalties:
          type: integer
          example: 5

    Migration:
      description: "Migration object that has a single assignment and a policy"
      type: object
      required:
        - assignment
        - policy
      properties:
        assignment:
          items:
            $ref: "#/components/schemas/Assignment"
        policy:
          items:
            $ref: "#/components/schemas/Policy"





